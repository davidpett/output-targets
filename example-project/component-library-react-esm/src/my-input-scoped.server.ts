/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 * Do __not__ import components from this file as server side rendered components
 * may not hydrate due to missing Stencil runtime. Instead, import these components through the generated 'components.ts'
 * file that re-exports all components with the 'use client' directive.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent, type SerializeShadowRootOptions } from '@stencil/react-output-target/ssr';
import { type InputChangeEventDetail, type MyInputScopedCustomEvent } from 'component-library';
import { MyInputScoped as MyInputScopedElement } from 'component-library/components/my-input-scoped.js';

export const serializeShadowRoot: SerializeShadowRootOptions = {
  scoped: ['my-counter'],
  default: 'declarative-shadow-dom',
};

export type MyInputScopedEvents = {
  onMyInput: EventName<MyInputScopedCustomEvent<KeyboardEvent>>;
  onMyChange: EventName<MyInputScopedCustomEvent<InputChangeEventDetail>>;
  onMyBlur: EventName<CustomEvent<void>>;
  onMyFocus: EventName<CustomEvent<void>>;
};

export const MyInputScoped: StencilReactComponent<MyInputScopedElement, MyInputScopedEvents> =
  /*@__PURE__*/ createComponent<MyInputScopedElement, MyInputScopedEvents>({
    tagName: 'my-input-scoped',
    properties: {
      color: 'color',
      accept: 'accept',
      autocapitalize: 'autocapitalize',
      autocomplete: 'autocomplete',
      autocorrect: 'autocorrect',
      autofocus: 'autofocus',
      clearInput: 'clear-input',
      clearOnEdit: 'clear-on-edit',
      disabled: 'disabled',
      enterkeyhint: 'enterkeyhint',
      inputmode: 'inputmode',
      max: 'max',
      maxlength: 'maxlength',
      min: 'min',
      minlength: 'minlength',
      multiple: 'multiple',
      name: 'name',
      pattern: 'pattern',
      placeholder: 'placeholder',
      readonly: 'readonly',
      required: 'required',
      spellcheck: 'spellcheck',
      step: 'step',
      size: 'size',
      type: 'type',
      value: 'value',
    },
    hydrateModule: import('component-library/hydrate'),
    serializeShadowRoot,
  });
